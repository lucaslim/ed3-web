name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      reason:
        description: Reason for manual deployment
        required: true
        type: string
      env:
        description: Environment to deploy to
        required: true
        type: choice
        default: stage
        options:
          - stage
          - prod

env:
  REACT_APP_SERVICES_ENV: ${{ github.event.inputs.env }}

jobs:
  context:
    runs-on: ubuntu-latest
    needs: setup-matrix
    steps:
      - run: echo "${{ github.event.inputs.reason }}"
      - run: echo $REACT_APP_SERVICES_ENV
      - run: echo "${{ needs.setup-matrix.outputs.matrix-paths }}"

  setup-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Setup matrix combinations
        id: matrix-paths
        run: |
          MATRIX_PATHS='
              "https://ed3.edealer.ca",
              "https://beta.getedealer.com"
          '
          echo ::set-output name=matrix-paths::{\"paths\":[$MATRIX_PATHS]}
    outputs:
      matrix-paths: ${{ steps.matrix-paths.outputs.matrix-paths }}

  matrix-job:
    runs-on: ubuntu-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-paths) }}
    steps:
      - run: |
          echo foo=${{ matrix.paths }}

  prep-matrix:
    runs-on: ubuntu-latest
    needs: [context]
    steps:
      - name: Set Sourcemap Paths
        uses: actions/github-script@v6.4.1
        id: sourcemap-paths
        with:
          script: |
            const { REACT_APP_SERVICES_ENV } = process.env;
            if(REACT_APP_SERVICES_ENV === 'stage') {
              return JSON.stringify({ paths: ['https://stage.getedealer.com']});
            }

            if(REACT_APP_SERVICES_ENV === 'prod') {
              return JSON.stringify({ paths: ['https://ed3.edealer.ca', 'https://beta.getedealer.com']});
            }
          result-encoding: string
      - run: echo "${{ steps.sourcemap-paths.outputs.result }}"
    outputs:
      sourcemap-paths: ${{ steps.sourcemap-paths.outputs.result }}

  upload-sourcemap:
    runs-on: ubuntu-latest
    needs: [prep-matrix]
    # if: ${{ always() && needs.stage.result == 'success' || needs.prod.result == 'success' }}
    strategy:
      matrix: ${{ fromJson(needs.prep-matrix.outputs.sourcemap-paths) }}
    steps:
      - run: |
          echo foo=${{ matrix.paths }}
